{"version":3,"sources":["../src/index.js"],"names":["JWTStrategy","passportJWT","Strategy","ExtractJWT","ExtractJwt","app","use","express","json","urlencoded","extended","passport","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","process","env","SECRET_KEY","jwtPayload","cb","models","User","findByLogin","username","err","user","req","res","next","context","routes","login","post","comment","session","get","error","Error","ip","originalUrl","statusCode","status","redirect","toString","eraseDatabaseOnSync","then","Promise","all","deleteMany","Post","Comment","seedDb","listen","PORT","console","log","user1","password","user2","user3","post1","title","body","id","published","post2","comment1p1","text","comment2p1","comment3p1","comment4p1","save"],"mappings":"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","sourcesContent":["import 'regenerator-runtime/runtime';\nimport 'core-js/stable';\n\nimport 'dotenv/config';\nimport cors from 'cors';\nimport express from 'express';\n\nimport routes from './routes';\nimport models, { connectDb } from './models';\nimport passport from 'passport';\nimport passportJWT from 'passport-jwt';\nimport logger from 'morgan';\n\nconst JWTStrategy = passportJWT.Strategy;\nconst ExtractJWT = passportJWT.ExtractJwt;\nconst app = express();\n\n// * Application-Level Middleware * //\n\n// Third-Party Middleware\n\napp.use(cors());\napp.use(logger('dev'));\n\n// Built-In Middleware\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Custom Middleware\npassport.use(\n  new JWTStrategy(\n    {\n      jwtFromRequest: ExtractJWT.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET_KEY,\n    },\n    async (jwtPayload, cb) => {\n      const user = await models.User.findByLogin(\n        jwtPayload.username,\n      ).catch((err) => {\n        return cb(err);\n      });\n      return cb(null, user);\n    },\n  ),\n);\n\napp.use(async (req, res, next) => {\n  req.context = {\n    models,\n  };\n  next();\n});\n\n// * Routes * //\napp.use('/login', routes.login);\napp.use('/users', routes.user);\napp.use(\n  '/posts',\n  // passport.authenticate('jwt', { session: false }),\n  routes.post,\n);\napp.use('/comments', routes.comment);\napp.use('/session', routes.session);\n\napp.get('*', function (req, res, next) {\n  const error = new Error(\n    `${req.ip} tried to access ${req.originalUrl}`,\n  );\n\n  error.statusCode = 301;\n\n  next(error);\n});\n\napp.use((error, req, res, next) => {\n  if (!error.statusCode) error.statusCode = 500;\n\n  if (error.statusCode === 301) {\n    return res.status(301).redirect('/not-found');\n  }\n\n  return res\n    .status(error.statusCode)\n    .json({ error: error.toString() });\n});\n\nconst eraseDatabaseOnSync = true;\n\nconnectDb().then(async () => {\n  if (eraseDatabaseOnSync) {\n    await Promise.all([\n      models.User.deleteMany({}),\n      models.Post.deleteMany({}),\n      models.Comment.deleteMany({}),\n    ]);\n\n    seedDb();\n  }\n\n  app.listen(process.env.PORT, () =>\n    console.log(`Example app listening on port ${process.env.PORT}!`),\n  );\n});\n\nconst seedDb = async () => {\n  const user1 = new models.User({\n    username: 'lord',\n    password: 'qqqqq',\n  });\n\n  const user2 = new models.User({\n    username: 'king',\n    password: 'qqqqq',\n  });\n\n  const user3 = new models.User({\n    username: 'john',\n    password: 'qqqqq',\n  });\n\n  const post1 = new models.Post({\n    title: \"What's going on\",\n    body: 'What is really going on, what is going on??',\n    user: user1.id,\n    published: true,\n  });\n\n  const post2 = new models.Post({\n    title: 'plz comment on this',\n    body: 'pleeeeaaassseee',\n    user: user3.id,\n    published: false,\n  });\n\n  const comment1p1 = new models.Comment({\n    text: \"dude idk, i've been wondering the same\",\n    user: user2.id,\n    post: post1.id,\n  });\n\n  const comment2p1 = new models.Comment({\n    text: 'thanks for hearing me',\n    user: user1.id,\n    post: post1.id,\n  });\n\n  const comment3p1 = new models.Comment({\n    text: 'hey guys',\n    user: user2.id,\n    post: post1.id,\n  });\n  const comment4p1 = new models.Comment({\n    text: \"i'm anon bitch\",\n    post: post1.id,\n  });\n\n  await user1.save();\n  await user2.save();\n  await user3.save();\n\n  await post1.save();\n  await post2.save();\n\n  await comment1p1.save();\n  await comment2p1.save();\n  await comment3p1.save();\n  await comment4p1.save();\n};\n"],"file":"index.js"}