{"version":3,"sources":["../../src/models/user.js"],"names":["Schema","mongoose","UserSchema","username","type","String","required","unique","password","timestamps","statics","findByLogin","login","findOne","user","pre","next","model","deleteMany","_id","isModified","bcrypt","hash","then","hashedPassword","err","methods","comparePassword","candidatePassword","compare","module","exports"],"mappings":";;AAAA;;AACA;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,qBAASD,MAAxB;AAEA,IAAME,UAAU,GAAG,IAAIF,MAAJ,CACjB;AACEG,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GADZ;AAEEC,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AAFZ,CADiB,EAKjB;AAAEG,EAAAA,UAAU,EAAE;AAAd,CALiB,CAAnB;;AAQAP,UAAU,CAACQ,OAAX,CAAmBC,WAAnB;AAAA,qEAAiC,iBAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACd,KAAKC,OAAL,CAAa;AAC5BV,cAAAA,QAAQ,EAAES;AADkB,aAAb,CADc;;AAAA;AAC3BE,YAAAA,IAD2B;AAAA,6CAIxBA,IAJwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAOAZ,UAAU,CAACa,GAAX,CAAe,QAAf,EAAyB,UAAUC,IAAV,EAAgB;AACvC,OAAKC,KAAL,CAAW,MAAX,EAAmBC,UAAnB,CAA8B;AAAEJ,IAAAA,IAAI,EAAE,KAAKK;AAAb,GAA9B,EAAkDH,IAAlD;AACD,CAFD;AAIAd,UAAU,CAACa,GAAX,CACE,MADF,EAEE,UAAUC,IAAV,EAAgB;AACd,MAAMF,IAAI,GAAG,IAAb;;AACA,MAAI,CAACA,IAAI,CAACM,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOJ,IAAI,EAAX;AACD;;AACDK,uBAAOC,IAAP,CAAYR,IAAI,CAACN,QAAjB,EAA2B,EAA3B,EAA+Be,IAA/B,CAAoC,UAACC,cAAD,EAAoB;AACtDV,IAAAA,IAAI,CAACN,QAAL,GAAgBgB,cAAhB;AACAR,IAAAA,IAAI;AACL,GAHD;AAID,CAXH,EAYE,UAAUS,GAAV,EAAe;AACbT,EAAAA,IAAI,CAACS,GAAD,CAAJ;AACD,CAdH,E,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,UAAU,CAACwB,OAAX,CAAmBC,eAAnB;AAAA,sEAAqC,kBACnCC,iBADmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGtBP,qBAAOQ,OAAP,CAAeD,iBAAf,EAAkC,KAAKpB,QAAvC,CAHsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMAsB,MAAM,CAACC,OAAP,GAAiB9B,qBAASgB,KAAT,CAAe,MAAf,EAAuBf,UAAvB,CAAjB","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema(\n  {\n    username: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n  },\n  { timestamps: true },\n);\n\nUserSchema.statics.findByLogin = async function (login) {\n  let user = await this.findOne({\n    username: login,\n  });\n  return user;\n};\n\nUserSchema.pre('remove', function (next) {\n  this.model('Post').deleteMany({ user: this._id }, next);\n});\n\nUserSchema.pre(\n  'save',\n  function (next) {\n    const user = this;\n    if (!user.isModified('password')) {\n      return next();\n    }\n    bcrypt.hash(user.password, 10).then((hashedPassword) => {\n      user.password = hashedPassword;\n      next();\n    });\n  },\n  function (err) {\n    next(err);\n  },\n);\n\n// UserSchema.methods.comparePassword = function (\n//   candidatePassword,\n//   next,\n// ) {\n//   bcrypt.compare(candidatePassword, this.password, function (\n//     err,\n//     isMatch,\n//   ) {\n//     if (err) return next(err);\n//     next(null, isMatch);\n//   });\n// };\n\nUserSchema.methods.comparePassword = async function (\n  candidatePassword,\n) {\n  return await bcrypt.compare(candidatePassword, this.password);\n};\n\nmodule.exports = mongoose.model('User', UserSchema);\n"],"file":"user.js"}